1.大小写相关
      '''
          1. capitalize() 首字母大写
          2. title()  每个单词的首字母大写
             istitle() 判断是否符合title的规范,返回值为 布尔值
          3. upper()  每个字母都大写
             isupper() 判断是否全部都是大写字母,返回值为布尔值
          4. lower()  每个字母都小写
             islower() 判断是否全都都是小写字母,返回值为布尔值
      '''
      # str = 'hello world'
      # print(str) # 原样输出 hello world
      # print(str.capitalize()) # 首字母大写 Hello world
      # print(str.title()) # 每个单词的首字母大写 Hello World
      # print(str.upper()) # 每个字母都大写 HELLO WORLD
      # print(str.lower()) # 每个字母都小写 hello world
      
      【补充】 ： 求字符串的长度的函数 len(str)，返回值是一个整型
               # s = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM0123456789'
               # print(len(s))  
               运行结果 62 
               
       【使用】 忽略大小写的验证码输入操作 ： 
               '''
                   Requirement Description
                   Find random verification code
               '''
              # import random
              # 
              # s = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM0123456789'
              # code = ''
              # for i in range(4):
              #     ran = random.randint(0, len(s)-1) # 此方法是 两个闭区间的操作，注意一下
              #     stran = s[ran]
              #     code += stran
              # print('verification code is :'+code)
              # yourcode = input('please input your verification code : ')
              # if yourcode.lower() == code.lower():
              #     print('welcome to my world')
              # else:
              #     print('your code is wrong!')
              
2.查找相关的
'''
    2.字符串的查找函数
      2.1 find  查找指定范围内的字符串，找不到时，返回-1
                Finds the location of a subString in the specified range
      2.2 rfind 从右侧开始查找
                Finds the location of a subString from right side
      2.3 index 与find方法是一样的，不过当找不到的时候，会报异常，而不是返回-1
                 It is the same as find method,but when the subString is can not be found,
                 an exception will be reported instead of -1
      2.4 rindex 与rfind一样
      2.5 替换 replace
      
'''

  2.1 find 
      str = 'wanghong chang'
      position1 = str.find('an') # 默认查找范围是 全部字符串
      print('---> ',position1)
      position2 = str.find('an',0,3)  # 指定查找范围是 [0,3),注意区间的开闭情况
      print('---> ', position2)
      position3 = str.find('an',3,len(str)-2) # 当在指定返回内查找不到的时候，返回 -1
      print('---> ',position3)
 2.2 rfind
      str = 'https://www.baidu.com/assets/blog_log1.png'
      position = str.rfind('/')
      print('---> ',position)
      #然后我就可以根据这个位置，进行字符串的截取了
      namestr = str[position+1:len(str)]
      print('===> ',namestr)
      
  2.3 replace
      str = 'wang hong  chang is a handsome boy'
      str1 = str.replace(' ', '-') # 将空格 ‘ ’ 替换为 ‘-’
      print('--str--> ', str)
      print('--str1-->', str1)
      str2 = str.replace(' ', '+', 5) # 指定替换的次数，5次
      print('--str2-->', str2)


3.编码和解码
'''
    3.编码和解码 ： 涉及到中文在网络中传输的时候，就需要用到
      3.1 encode ： 编码
          encode(encoding='UTF-8',errors='strict')
                 encoding 指定编码格式，如果出现异常，默认报错 ValueError;
                 除非erroes指定时ignore 或者 replace
      3.2 decode : 解码
'''

      msg = 'hello 王宏昌!'
      #编码
      b_msg = msg.encode('utf-8')
      print(b_msg)
      #解码
      receive_msg = b_msg.decode('utf-8')
      print(receive_msg)
      
 4. 开头和结尾的判断      
       '''
       4. 开头和结尾的判断 : 返回结果时布尔值
          常用来对文件类型进行判断
          Commonly used to judge the file type
        4.1 startswith ： 判断是否以。。。开头
        4.2 endswith : 判断是否以。。。结尾
      '''

      str = 'abc/def/qewwre.txt'
      print(str.startswith('abc')) # True
      print(str.endswith('.tt')) # False
      
 5. 判断字母 和 数字 的函数
       '''
        5. 几个判断使用的函数
          5.1 isalnum : 如果字符串至少有一个字符并且所有字符都是字母或数字，则返回True,否则，返回False
          5.2 isalpha : 如果字符串至少有一个字符并且所有字符都是字母，则返回True,否则，返回False
          5.3 isdigit : 如果字符串至少有一个字符并且所有字符都是数字，则返回True,否则，返回False
      '''

      str = 'wanghongchang123'
      print(str.isalnum())
      str = 'wanghongchang'
      print(str.isalpha())
      str = '0231'
      print(str.isdigit())
      
      
 6. join 函数 ： 用来拼接字符串的
       '''
          join() : 以指定字符串作为拼接符，将列表进行拼接期来

      '''

      str = 'wang'
      res1 = '-'.join(str) # 以 '-'作为拼接符，将字符串str拼接起来
      print(res1) # 结果是 w-a-n-g
      #下面简单理解一下列表，就可以理解为一个 数组
      strs = ['w','a','n','g','h'] # 这就是个列表
      res2 = '-'.join(strs)
      print(res2) # 结果是 w-a-n-g-h
      
  7. 去除字符串前后的空格的函数
        '''
          strip() 去掉字符串前后空格的函数
          lstrip() 去掉左边的空格
          rstrip() 去掉右边的空格
      '''
            s = '   wang   '
            print('-->', s.replace(' ', '*'), '<--')
            s1 = s.lstrip()
            print('-->', s1.replace(' ', '*'), '<--')
            s2 = s.rstrip()
            print('-->', s2.replace(' ', '*'), '<--')
            s3 = s.strip()
            print('-->', s3.replace(' ', '*'), '<--')

            print('*', s, '*') # 原来的字符串是没有变的
            
  8. 求字符串中的子字符串的个数
        '''
        count() 求字符串中 子字符串的 个数
      '''
      s = 'wang hong chang'
      res = s.count('ng')
      print('{} has {} "ng" '.format(s, res))
      # result ： wang hong chang has 3 "ng" 
      
  9. 按照某个字符分割字符串
        '''
          split() : 分割函数，将字符串按照某个字符进行分割
                    并且返回值为 列表 （就是个数组，就是个集合，可以这么理解）
      '''
      s = 'wang-hong-chang'
      res = s.split('-') # 表示 按照 ‘-’ 进行分割字符串
      print(res) # result : ['wang', 'hong', 'chang']
