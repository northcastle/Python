'''
    装饰器 ：就是对一个函数进行扩展的，可以简单理解为 切面 编程 AOP

        简单使用案例 ： 判断用户是否登陆

    特点 ： 1.要有闭包的特点
            2.参数是一个函数名

    代码流程解析 ：
        1.login 是被装饰函数；
        2.将被装饰函数 login 作为参数 传递给 装饰器 decorate_login(func_login)
        3.执行 decorate_login 这个装饰器函数
        4.将 decorate_login 的返回值wrapper_login ，又返回给 login
        5.因此，当调用 login 的时候，会出现 wrapper_login,中的内容



'''

#1.定义一个装饰器 : 传进来的参数是一个函数的名称

def decorate_login(func_login):
    login_result = False

    def wrapper_login(*args): # 这里可以使用可变的参数，来应对不同的被装饰函数的参数问题
        login_result = func_login(*args)
        if login_result:
            print('Welcome 登陆成功！')
        else:
            print('Sorry 请你滚开！')
        print('================登陆验证完成！======================')
    return wrapper_login


#2.1 定义一个login的无参数的函数,并且使用一下装饰器
@decorate_login
def login():
    username = input('请输入用户名 ：')
    password = input('请输入密码 ： ')
    res = False
    if username == 'abc' and password == 'abc':
        res = True
    else:
        res = False
    return res

#2.2 调用函数
login()
'''
运行结果 ： 
    请输入用户名 ：王宏昌
    请输入密码 ： 撒打发打发打发
    Sorry 请你滚开！
================登陆验证完成！======================
'''

#3.1 定义一个带参数的login函数,而且是两个参数
@decorate_login
def login_01(username,password):
    res = False
    if username == 'abc' and password == 'abc':
        res = True
    else:
        res = False
    return res

login_01('abc','abc')
'''
运行结果 ：
   Welcome 登陆成功！
   ================登陆验证完成！======================
'''

