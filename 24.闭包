'''
    闭包 ： 这是一个在 函数的基础上 提出的概念
      1.条件 ：
        1.1 外部函数中定义了内部函数
        1.2 外部函数有返回值
        1.3 外部函数的返回值是 内部函数的 函数名
        1.4 严格的闭包 ： 一定是引用了 外部函数的变量的
      2. 格式 ：
         def func_name_out():
            ...
            def func_name_inner():
                ...
                pass

            return func_name_inner


'''

      #1. 定义外部函数
      def func_sum_out(a,b):
          c = 100
          #2.定义内部函数
          def func_sum_innner():
              sum = a+b+c
              print('sum = ',sum)
          #3.将内部函数 的函数名返回
          return func_sum_innner

      #4.接受返回出来的内部函数名
      func_inner = func_sum_out(10,35)
      #5.调用内部函数，直接加个括号就可以
      func_inner() # sum =  145
==================================================================================================================

'''
    闭包的作用 :
        1.可以使用相同的作用域
        2.读取其他元素的内部变量
        3.延长作用域
    闭包的缺点 ：
        1.作用域没有那么直观
        2.因为内存不会被垃圾回收，所以有一定的内存浪费问题
    闭包的总结 ：
        1.闭包看似优化了变量，原来需要类对象完成的工作，闭包也可以完成
        2.由于闭包引用了外部函数的局部变量，则，外部函数的内存没有释放，消耗内存
        3.闭包的好处，使代码变得整洁，方便阅读
        4.闭包是理解装饰器的基础

'''

def func_out():
    count = 1
    def func_inner():
        nonlocal count
        print('this is the {} time call the inner function'.format(count))
        count += 1
    return func_inner

x = func_out() # 这就获取到了这个闭包的内部函数

# 对于下面的结果，自己可以好好理解一下，真的不好理解
x()  # this is the 1 time call the inner function
x()  # this is the 2 time call the inner function
x()  # this is the 3 time call the inner function


