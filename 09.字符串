1.三种表示方法
  1.1 str1 = 'abc'

  1.2 str2 = "abc"

  1.3 str3 = '''abc''' 三个引号表示保留字符串的格式
 
 2.两种比较方式 
   2.1 == ： 比较内容是否一样
          # str1 = 'abc'
          # str2 = "abc"
          # str3 = '''abc'''
          # 
          # print(id(str1), id(str2), id(str3))
          # 
          # print(str1 == str2) True
          # print(str2 == str3) True
   2.2 is ： 比较地址是否一样
       2.2.1 常量赋值的时候， is 会一样
          # str1 = 'abc'
          # str2 = "abc"
          # str3 = '''
          #    abc
          #   '''
          # 
          # print(id(str1), id(str2), id(str3))
          #        
          # print(str1 is str2) True      
          # print(str2 is str3) False : 因为 str3 存在换行的操作 
          # print('----------------')
       2.2.2 但是 input() 得到相同的值，此时 is 比较是false,
             但是当单字符的时候，比如a，结果就是true，哎，这个就很神奇
                  # s1 = input('please input s1 : ')
                  # s2 = input('please input s2 : ')
                  # 
                  # print(id(s1),id(s2))
                  # 
                  # print(s1 == s2)
                  # print(s1 is s2)

                  如果输入的是 ： asd ,则结果为 ： True False
                  如果输入的是 ： a ,则结果为 ： True True
              
              
  3.字符串的运算符
     3.1 连接符 + ： 把字符串拼接在一起
        # s1 = 'asd'
        # s2 = 'qwe'
        # 
        # s3 = s1 + s2
        # 
        # print(s3)
        运行结果 ： asdqwe
        
     3.2 倍数 * ： 把这个字符串赋值多少遍
        # s1 = 'asd'
        # s2 = 'qwe'
        # 
        # s4 = s1 * 3
        # 
        # print(s4)
        运行结果  asdasdasd
      3.3 in : 判断子字符串时候包含在大字符串内 : 返回值为布尔值，True False
      3.4 not in : 不在大字符串内 
           # s1 = 'wanghongchang'
           # res = 'hon' in s1
           # print(res) True
           # 
           # res = 'hon' not in s1
           # print(res) False
       3.5 %s : 字符串的格式化，相当于一个占位符吧
           # print('%s says : "%s" ' % ('abc', 'good good study'))
           运行结果 ： abc says : "good good study" 
           
       3.6 r : 保留原格式，如果由转义字符，则不会生效
           # print('%s says : \'%s\' ' %('abc', 'good good stuey'))  ：abc says : 'good good stuey'  （转义字符生效）
           # print(r'%s says : \'%s\' ' %('abc', 'good good stuey')) ：abc says : \'good good stuey\' （转义字符并没有生效）
       
        3.7 [] ,[ : ] ：截取字符串的操作,注意,下标是从 0 开始的
        3.8 [] 中的负数 : -1 表示 最后一个字符,-2 表示倒数第二个字符 ...
            # name = 'wanghongchang.qq.com'
            # print(name[5]) # o ： 获取具体某一位
            # print(name[0:5]) # wangh ： 获取从 0 到 4 的位置，前闭后开 区间 [0,5)
            # print(name[5:]) # ongchang.qq.com : 获取从 5 开始到最后 [5,最后)
            # print(name[:5]) # wangh ： 获取从0 到 4， 前闭后开 区间 [0,5)
            【注意下面的这个用负数的操作】
            # print(name[5:-2]) # ongchang.qq.c ，同样是前开后闭区间 [5,-2)
            
    **4.字符串的正序输出 和 倒序输出 
          # str = 'abcdefg'
          # print(str)   # abcdefg
          # print(str[:]) # abcdefg
          # print(str[::1]) # abcdefg
          # print(str[::3]) # adg  这个表示步长,即表示2个输出一个
          # print(str[1:6]) # bcdef
          # print('-------------------')
          # print(str[::-1]) # gfedcba 带负号就表示倒序,这样就把这个字符串倒过来了
          # print(str[-1:-7:-1]) # gfedcb
          # print(str[-1:-7:-2]) # gec
        
       截取字符串的小练习 ： 
          '''
              小练习 : str = 'hello world'
              1.逆序输出 world --- dlrow
              2.正向输出 hello
              3.逆序输出整个 hello world
              4.打印 获取 oll
              5.打印 llo wor
           '''
           参考代码 ： 
              str = 'hello world'
              print(str[-1:-6:-1])
              print(str[0:5])
              print(str[::-1])
              print(str[-7:-10:-1])
              print(str[2:8])
       
                
