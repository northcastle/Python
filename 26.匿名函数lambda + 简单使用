'''
    匿名函数 ： lambda 函数，一个函数比较简单的时候，就可以用lambda函数
        1. 格式 ： lambda param1,param2.. : expression(result)
        2. lambda 函数作为 参数 ，传递给 函数

'''
#1.定义一个 匿名函数，并且 func_niming 指向了 这个匿名函数
#2.lambda 就表示 要定义一个匿名函数
#3. a,b 是这个匿名函数的两个参数
#4. : 冒号表示后面的内容就是 匿名函数的返回值了
#5. a*b 就是返回值
#6. res 用来接收 匿名函数的返回值


func_niming = lambda a,b : a * b
res = func_niming(2,5)
print(res) # 10

======================================================

'''
    2.匿名函数 作为函数参数 
'''
# 1. 求 列表中的最大值
list1 = [1,2,5,66,88,21]
res_max_1 = max(list1)
print('list1 的 最大值是 ： {}'.format(res_max_1)) # list1 的 最大值是 ： 88

#2. 那如果我要求 列表元素是 字典，并且是 每个字典中的 a 所对应的那个值的最大值呢？
list2 = [{'a':10,'b':11},{'a':20,'b':21},{'a':300,'b':301},{'a':50,'b':51}]
# 理解 ： 把 list2 中的每个元素（字典） 给 匿名函数 的参数 dict_e,
#         然后返回的是 每个元素 的 key = 'a' 所对应的值
# 由此 来进行 比较就ok了
# 了解 ： 1. 匿名函数 作为参数的用法；2. max/min 函数的具体用法
res_max_2 = max(list2,key= lambda dict_e : dict_e['a'])
print(res_max_2) # {'a': 300, 'b': 301}

#3. 另一个 匿名函数的使用 map
list3 = [1,2,3,4,5,6]
map_obj = map(lambda x:x*2,list3) # 使用 匿名函数作为参数，
print(map_obj) # <map object at 0x0000018D7F6996A0> 这个是那个 map的对象
print(list(map_obj)) # [2, 4, 6, 8, 10, 12] ,把上面的map对象强转成 list对象
#更复杂一点的操作
map_obj_2 = map(lambda x: x if x % 2 == 0 else x*2,list3) # 这个匿名函数 稍微进行了一点操作而已
print(list(map_obj_2)) # [2, 2, 6, 4, 10, 6]

#4. 另一个使用的实例 reduce 函数 : 需要从别的模块functools中导入进来
from functools import reduce
tuple_1 = (1,2,3,4,5,6)
res = reduce(lambda x,y : x*y,tuple_1) # 匿名函数执行的是一个叠乘的操作
print('res = ',res) # res =  720
res = reduce(lambda x,y : x/y,tuple_1) # 匿名函数执行的是一个叠除的操作
print('res = ',res) # res =  0.001388888888888889
res = reduce(lambda x,y : x+y,tuple_1) # 匿名函数执行的是一个叠加的操作
print('res = ',res) # res = 21
res = reduce(lambda x,y : x-y,tuple_1) # 匿名函数执行的是一个叠减的操作
print('res = ',res) # res = -19

