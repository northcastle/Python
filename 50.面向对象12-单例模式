'''
    单例模式 ：
        1.这是一种对内存的优化，每次都是同一个对象，节省内存空间
        2. 但是，需要使用单例的时候才能使用单例
        3. 实现原理 ： 创建对象的时候，进行判断，此对象是否已经存在了，
                        如果已经存在，则直接返回
                        如果没有存在，则创建新的
                      也就是在 __new__() 这个方法上面进行手脚
'''

# create a single class
class Singleton:
    #1.私有化类属性，用来保存对象的地址
    __instance = None

    #2.重写__new__()方法
    def __new__(cls, *args, **kwargs):
        #2.1 如果对象不存在，则创建，否则直接返回
        if cls.__instance is None:
            cls.__instance = object.__new__(cls)
        #2.2 直接返回对象的地址，确保是一个地址
        return cls.__instance

    #3.自己定义一个方法
    def show(self,num):
        print('对象打印的数字 ： ',num)


#create a single object
s1 = Singleton()
#create another single object
s2 = Singleton()
#show their address and confirm weather they are same or not
print(s1)
print(s2)
'''
Operation result: 这两个对象的地址是一样的
    <__main__.Singleton object at 0x0000026462A8F5E0>
    <__main__.Singleton object at 0x0000026462A8F5E0>
'''

# call the method
s1.show(100)
s2.show(200)
'''
Operation result:
    对象打印的数字 ：  100
    对象打印的数字 ：  200
'''
