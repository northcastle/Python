
'''
    魔术方法 ：
        1. __del__():析构魔术方法
            触发时机 ： 当对象没有任何变量引用的时候触发
            1.1 对象的赋值
                p = Phone()
                p1 = p
                p2 = p
                此时 p,p1,p2 三个引用指向了 同一块地址
            1.2 删除地址的引用
                del p1
            1.3 查看地址的引用次数的操作
                import sys
                sys.getrefcount(p) : 就是这个方法
            1.4 当一块空间没有任何引用的时候，会执行__del__()方法
                
            1.5 当本程序中所有的代码都执行完毕的时候，
                python解释器会回收本次执行过程中使用的空间
                垃圾回收机制，这是python底层自带的
            1.6 知道这个方法即可，尽量自己别写
                因为可能会影响到python底层的垃圾回收机制
                导致垃圾回收不及时
'''

import sys

class Phone5:

    # 1. 实例化方法
    def __new__(cls, *args, **kwargs):
        print('---new begin---')
        return super().__new__(cls)

    # 2. 初始化方法
    def __init__(self,brand,price):
        print('---init begin---')
        self.brand = brand
        self.price = price
        print('---init begin---')

    #3. 析构方法
    def __del__(self):
        print('---del---')

#1.创建对象 和 对象 赋值
pp = Phone5('OPPO',3200)
pp1 = pp
pp2 = pp
'''
Operation result:
   ---new begin---
   ---init begin---
   ---init begin---
   ---del---  # 当程序执行完成之后，python解释器自动执行的垃圾回收机制
'''

#2.查看当前有几个对象的引用
print('第一次查看，当前有几个引用 ： ',sys.getrefcount(pp))
'''
Operation result:
    ---new begin---
    ---init begin---
    ---init begin---
    第一次查看，当前有几个引用 ：  4 # (pp,pp1,pp2,和 执行这个方法需要一个引用)
    ---del---  # 当程序执行完成之后，python解释器自动执行的垃圾回收机制
'''

#3.执行删除 引用的操作
del pp1
del pp2
print('第二次查看，当前有几个引用 ： ',sys.getrefcount(pp))
print('我就是想在这里打印这一句话，证明最后执行的垃圾回收机制')
'''
Operation result:
    ---new begin---
    ---init begin---
    ---init begin---
    第一次查看，当前有几个引用 ：  4 # (pp,pp1,pp2,和 执行这个方法需要一个引用)
    第二次查看，当前有几个引用 ：  2 # (pp 和 执行这个方法需要一个引用)
    我就是想在这里打印这一句话，证明最后执行的垃圾回收机制
    ---del---  # 当程序执行完成之后，python解释器自动执行的垃圾回收机制
'''

#4. 把上面的3注释掉，然后执行下面的代码
del pp1
del pp2
del pp
print('第三次查看，当前有几个引用 ： ',sys.getrefcount(pp))
print('我就是想在这里打印这一句话，证明最后执行的垃圾回收机制')
'''
Operation result:
    ---new begin---
    ---init begin---
    ---init begin---
    第一次查看，当前有几个引用 ：  4
    ---del--- # 因为三个对象引用全部都被抹掉了，所以__del__（） 方法直接就执行了！
'''
