
'''
    静态方法 : 
        1.需要装饰器 @staticmethod
        2.不需要参数（self,cls）
        3.只可以访问类属性： 
            3.1 直接使用 “类名.类属性” 的方式
            3.2 直接使用 “类名.类方法名” 的方式
            3.3 直接使用 “类名().类方法名” 的方式
            3.4 不可以访问对象的属性
        4.使用方式 ： 类名.静态方法名
        5.加载时机：只要有了类就有了静态方法
'''

class Phone3:
    brand = 'iPhone'

    def func_1(self,name):
        print('hello : {}'.format(name),' --->func_normal')

    @classmethod
    def func_2(cls,name):
        print('hello : {}'.format(name),' --->func_class_method')

    @staticmethod
    def func_3(name):
        print('hello : {}'.format(name),' --->func_static_method')
        # 1.通过 类名.类属性 来获取 和 使用 类属性
        print('this is phone :{}'.format(Phone3.brand))
        # 2. 通过 类名.类方法名 来调用 类方法
        Phone3.func_2('whc_inner_class_method')
        # 3. 调用 普通方法 : 这就十分的奇怪了，不过理论上讲的同:Phone3() : 就是一个对象了
        Phone3().func_1('whc_inner_method')


#1. 使用静态方法
Phone3.func_3('whc')


'''
Operation result:
    hello : whc  --->func_static_method
    this is phone :iPhone
    hello : whc_inner_class_method  --->func_class_method
    hello : whc_inner_method  --->func_normal  
'''
